package edu.kit.ipd.sdq.kamp4iec.core;

import java.util.Map;
import java.util.Set;

import edu.kit.ipd.sdq.kamp.architecture.AbstractArchitectureVersion;
import edu.kit.ipd.sdq.kamp4iec.model.IECModel.FunctionBlock;
import edu.kit.ipd.sdq.kamp4iec.model.IECModel.GlobalVariable;

public class ArchitectureModelLookup {
	/**
	 * Recursive lookup of Composite- and CollectionDataTypes containing certain
	 * DataTypes. Duplicates are eliminated.
	 */
	public static Map<FunctionBlock, Set<GlobalVariable>> lookUpCompositeAndCollectionDataTypesOfDataTypes(
			BPArchitectureVersion version, Collection<DataType> dataTypes) {
		Map<DataType, Set<DataType>> results = new HashMap<DataType, Set<DataType>>();
		List<DataType> allDataTypes = BPArchitectureModelLookup.lookUpAllDataTypes(version);
		List<DataType> dataTypesToVisit = new LinkedList<DataType>(dataTypes);
		
		while (!dataTypesToVisit.isEmpty()) {
			DataType simpleDataType = dataTypesToVisit.remove(0);		
			for (DataType resultCandidate: allDataTypes) {
				if (resultCandidate instanceof CompositeDataType) {
					CompositeDataType complexDataType = (CompositeDataType) resultCandidate;
					for (InnerDeclaration innerDeclaration: complexDataType.
							getInnerDeclaration_CompositeDataType()) {
						if (innerDeclaration.getDatatype_InnerDeclaration().equals(simpleDataType)) {
							if (!dataTypesToVisit.contains(complexDataType) && 
									!results.containsKey(complexDataType)) { //Analyze only once
								dataTypesToVisit.add(complexDataType); 
							}
							MapUtil.putOrAddToMap(results, complexDataType, simpleDataType);
						}
					}
				} else if (resultCandidate instanceof CollectionDataType) {
					CollectionDataType complexDataType = (CollectionDataType) resultCandidate;
					if (complexDataType.getInnerType_CollectionDataType().equals(simpleDataType)) {
						if (!dataTypesToVisit.contains(complexDataType) &&
								!results.containsKey(complexDataType)) { //Analyze only once
							dataTypesToVisit.add(complexDataType);
						}
						MapUtil.putOrAddToMap(results, complexDataType, simpleDataType);
					}
				}
			}
		}
		
		return results;
	}
}
