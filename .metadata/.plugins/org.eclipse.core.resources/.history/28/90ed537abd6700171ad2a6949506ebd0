package edu.kit.ipd.sdq.kamp4iec.core.derivation;

import edu.kit.ipd.sdq.kamp.workplan.AbstractActivityElementType;
import edu.kit.ipd.sdq.kamp.workplan.Activity;
import edu.kit.ipd.sdq.kamp4iec.model.IECModel.IECComponent;

public class SubactivityDerivation {

	public void deriveSubactivities(Identifier plantElement, Activity parentActivity, ArchitectureVersion version) {
		if (plantElement instanceof Component) {
			deriveSubactivity((Component) plantElement, parentActivity, version);
		} else if (plantElement instanceof Interface) {
			deriveSubactivity((Interface) plantElement, parentActivity, version);
		} else if (plantElement instanceof Module) {
			deriveSubactivity((Module) plantElement, parentActivity, version);
		} else if (plantElement instanceof Structure) {
			deriveSubactivity((Structure) plantElement, parentActivity, version);
		}
	

	protected void deriveCollectionDataObjectSubacitvities(CollectionDataObject dataObject, 
			Activity dataObjectActivity) {
		for(DataObject<?> innerDataObject: dataObject.getInnerDataObjects()) {
			ISSubactivityDerivation.addSubActivity(innerDataObject, 
					BPActivityElementType.COLLECTIONDATAOBJECT_INNEROBJECT, 
					dataObject, dataObjectActivity);
		}
	}
	
	protected void deriveCompositeDataObjectSubacitvities(CompositeDataObject dataObject, 
			Activity dataObjectActivity) {
		for(InnerDataObjectDeclaration innerDataObjectDeclaration: dataObject.getInnerDataObjectDeclarations()) {
			ISSubactivityDerivation.addSubActivity(innerDataObjectDeclaration, BPActivityElementType.COMPOSITEDATAOBJECT_INNERDECLARATION, dataObject, dataObjectActivity);
		}
	}
	
	protected void deriveELSCSubacitvities(EntryLevelSystemCall elsc, Activity elscActivity) {
		OperationSignature signature = elsc.getOperationSignature__EntryLevelSystemCall();
		if (signature != null) {
			ISSubactivityDerivation.addSubActivity(signature, 
					BPActivityElementType.ENTRYLEVELSYSTEMCALL_OPERATION, 
					elsc, elscActivity);
		}
	}
	
	protected void deriveActorStepSubactivities(ActorStep actorStep, Activity actorActivity) {
		List<DataObject<?>> dataObjects = new LinkedList<DataObject<?>>();
		dataObjects.addAll(actorStep.getInputDataObjects());
		dataObjects.addAll(actorStep.getOutputDataObjects());
		for (DataObject<?> dataObject: dataObjects) {
			ISSubactivityDerivation.addSubActivity(dataObject, 
					BPActivityElementType.ACTORSTEP_DATAOBJECT, actorStep, actorActivity);
		}
		Role role = actorStep.getResponsibleRole();
		if (role != null) {
			ISSubactivityDerivation.addSubActivity(role, BPActivityElementType.ACTORSTEP_ROLE, 
					actorStep, actorActivity);
		}
	}
	
	protected void deriveAcquireDeviceResourceActionSubactivities(AcquireDeviceResourceAction acquireAction,
			Activity acquireActivity) {
		DeviceResource deviceResource = acquireAction.getPassiveresource_AcquireAction();
		if (deviceResource != null) {
			ISSubactivityDerivation.addSubActivity(deviceResource, 
					BPActivityElementType.DEVICERESOURCE, acquireAction, acquireActivity);
		}
	}
	
	protected void deriveReleaseDeviceResourceActionSubactivities(ReleaseDeviceResourceAction releaseAction,
			Activity releaseActivity) {
		DeviceResource deviceResource = releaseAction.getPassiveresource_ReleaseAction();
		if (deviceResource != null) {
			ISSubactivityDerivation.addSubActivity(deviceResource, 
					BPActivityElementType.DEVICERESOURCE, releaseAction, releaseActivity);
		}
	}

}