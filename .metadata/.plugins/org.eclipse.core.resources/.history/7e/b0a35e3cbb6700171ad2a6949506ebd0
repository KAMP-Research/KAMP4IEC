package edu.kit.ipd.sdq.kamp4iec.core.derivation;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.compare.Diff;

import edu.kit.ipd.sdq.kamp.derivation.AbstractDifferenceCalculation;
import edu.kit.ipd.sdq.kamp.workplan.Activity;
import edu.kit.ipd.sdq.kamp4iec.core.ArchitectureVersion;

public class DifferenceCalculation extends AbstractDifferenceCalculation<ArchitectureVersion>{

	private final InternalModificationDerivation architectureInternalModificationDerivation = new InternalModificationDerivation();
	private final SubactivityDerivation architectureSubactivityDerivation = new SubactivityDerivation();
	private ArchitectureVersion version;

	@Override
	public List<Activity> deriveWorkplan(ArchitectureVersion baseVersion, ArchitectureVersion targetVersion) {
		this.version = targetVersion;
		List<Activity> activityList = new ArrayList<Activity>();
		
		List<Diff> konfigurationDiff = calculateDiffModel(baseVersion.getKonfiguration(), targetVersion.getKonfiguration());
		
		List<Activity> plantActivities = deriveAddAndRemoveActivities(konfigurationDiff);
		activityList.addAll(plantActivities);		
		
		List<Activity> internalModificationActivities = this.architectureInternalModificationDerivation.deriveInternalModifications(targetVersion);
		activityList.addAll(internalModificationActivities);

		return activityList;
	}

	public static String createAddElementDescription(Identifier element) {
		return "Add " + element.eClass().getName() + " " + element.getId() + ".";
	}

	public static String createRemoveElementDescription(Identifier element) {
		return "Remove " + element.eClass().getName() + " " + element.getId() + ".";
	}
	
	@Override
	public void checkForDifferencesAndAddToWorkplan(Diff diffElement, List<Activity> workplan) {
		this.isDifferenceCalculation.checkForDifferencesAndAddToWorkplan(diffElement, workplan);
		for (BPActivityElementType elementType: BPActivityElementType.getTopLevelArchitectureActivityElementTypes()) {
			if (detectionRuleAdded(diffElement, elementType.getElementClass())) {
				NamedElement architectureElement = (NamedElement)(((ReferenceChange)diffElement).getValue());
				Activity newActivity = new Activity(ISActivityType.ARCHITECTUREMODELDIFF, elementType, 
						architectureElement, architectureElement.getEntityName(), null, BasicActivity.ADD, 
						ISDifferenceCalculation.createAddElementDescription(architectureElement));
				workplan.add(newActivity);
				this.bpSubactivityDerivation.deriveSubacitvities(architectureElement, newActivity);
				break;
			} 
			if (detectionRuleDeleted(diffElement, elementType.getElementClass())) {
				NamedElement architectureElement = (NamedElement)(((ReferenceChange)diffElement).getValue());
				Activity newActivity = new Activity(ISActivityType.ARCHITECTUREMODELDIFF, elementType,
						architectureElement, architectureElement.getEntityName(), null, BasicActivity.REMOVE, 
						ISDifferenceCalculation.createRemoveElementDescription(architectureElement));
				workplan.add(newActivity);
				this.bpSubactivityDerivation.deriveSubacitvities(architectureElement, newActivity);
				break;
			}
		}
	}

}
